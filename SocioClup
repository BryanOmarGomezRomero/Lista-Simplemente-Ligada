#include <iostream>
#include <string>

using namespace std;

// clase SocioClub
class SocioClub {
private:
    int NumeroSocio;
    string NombreSocio;
    string Domicilio;
    int AnioIngreso;

public:
    // constructor por defecto
    SocioClub() : NumeroSocio(0), NombreSocio(""), Domicilio(""), AnioIngreso(0) {}

    // constructor con parametros
    SocioClub(int numero, string nombre, string domicilio, int anio)
        : NumeroSocio(numero), NombreSocio(nombre), Domicilio(domicilio), AnioIngreso(anio) {}

    // sobrecarga del operador menor que para ordenar por NumeroSocio
    bool operator<(const SocioClub &otro) const {
        return NumeroSocio < otro.NumeroSocio;
    }

    // sobrecarga del operador igual para comparar NumeroSocio
    bool operator==(const SocioClub &otro) const {
        return NumeroSocio == otro.NumeroSocio;
    }

    // metodos de acceso
    int getNumeroSocio() const { return NumeroSocio; }
    string getNombreSocio() const { return NombreSocio; }
    string getDomicilio() const { return Domicilio; }
    int getAnioIngreso() const { return AnioIngreso; }

    // metodos de actualizacion
    void setNumeroSocio(int numero) { NumeroSocio = numero; }
    void setNombreSocio(string nombre) { NombreSocio = nombre; }
    void setDomicilio(string domicilio) { Domicilio = domicilio; }
    void setAnioIngreso(int anio) { AnioIngreso = anio; }

    // metodo para mostrar los datos del socio
    void mostrar() const {
        cout << "Numero de Socio: " << NumeroSocio << endl;
        cout << "Nombre: " << NombreSocio << endl;
        cout << "Domicilio: " << Domicilio << endl;
        cout << "Anio de Ingreso: " << AnioIngreso << endl;
    }
};

// nodo de la lista simplemente ligada
struct Nodo {
    SocioClub socio;
    Nodo *siguiente;
};

// clase ListaSocios para manejar la lista
class ListaSocios {
private:
    Nodo *cabeza;
    int totalSocios;

public:
    // Constructor
    ListaSocios() : cabeza(nullptr), totalSocios(0) {}

    // Destructor
    ~ListaSocios() {
        while (cabeza != nullptr) {
            Nodo *temp = cabeza;
            cabeza = cabeza->siguiente;
            delete temp;
        }
    }

    // insertar un nuevo socio de forma ordenada
    void insertarSocio(SocioClub nuevoSocio) {
        Nodo *nuevoNodo = new Nodo{nuevoSocio, nullptr};
        if (cabeza == nullptr || nuevoSocio < cabeza->socio) {
            nuevoNodo->siguiente = cabeza;
            cabeza = nuevoNodo;
        } else {
            Nodo *actual = cabeza;
            while (actual->siguiente != nullptr && !(nuevoSocio < actual->siguiente->socio)) {
                actual = actual->siguiente;
            }
            nuevoNodo->siguiente = actual->siguiente;
            actual->siguiente = nuevoNodo;
        }
        totalSocios++;
    }

    // eliminar un socio por NumeroSocio
    bool eliminarSocio(int numeroSocio) {
        if (cabeza == nullptr) return false;

        if (cabeza->socio.getNumeroSocio() == numeroSocio) {
            Nodo *temp = cabeza;
            cabeza = cabeza->siguiente;
            delete temp;
            totalSocios--;
            return true;
        }

        Nodo *actual = cabeza;
        while (actual->siguiente != nullptr && actual->siguiente->socio.getNumeroSocio() != numeroSocio) {
            actual = actual->siguiente;
        }

        if (actual->siguiente == nullptr) return false;

        Nodo *temp = actual->siguiente;
        actual->siguiente = actual->siguiente->siguiente;
        delete temp;
        totalSocios--;
        return true;
    }

    // buscar socio por nombre y domicilio
    Nodo* buscarSocio(string nombre, string domicilio) {
        Nodo *actual = cabeza;
        while (actual != nullptr) {
            if (actual->socio.getNombreSocio() == nombre && actual->socio.getDomicilio() == domicilio) {
                return actual;
            }
            actual = actual->siguiente;
        }
        return nullptr;
    }

    // mostrar todos los socios (reporte)
    void generarReporte() const {
        Nodo *actual = cabeza;
        while (actual != nullptr) {
            actual->socio.mostrar();
            cout << "----------------------" << endl;
            actual = actual->siguiente;
        }
    }

    // obtener el total de socios registrados
    int obtenerTotalSocios() const {
        return totalSocios;
    }
};

// menu 
void menu() {
    ListaSocios lista;
    int opcion;

    do {
        cout << "\nMENU:\n";
        cout << "1. Registrar nuevo socio\n";
        cout << "2. Dar de baja a un socio\n";
        cout << "3. Generar reporte de socios\n";
        cout << "4. Buscar socio por nombre y domicilio\n";
        cout << "5. Calcular total de socios\n";
        cout << "6. Salir\n";
        cout << "Seleccione una opcion: ";
        cin >> opcion;

        switch (opcion) {
            case 1: {
                int numero, anio;
                string nombre, domicilio;
                cout << "Ingrese numero de socio: ";
                cin >> numero;
                cout << "Ingrese nombre del socio: ";
                cin.ignore();
                getline(cin, nombre);
                cout << "Ingrese domicilio: ";
                getline(cin, domicilio);
                cout << "Ingrese aÃ±o de ingreso: ";
                cin >> anio;

                SocioClub nuevoSocio(numero, nombre, domicilio, anio);
                lista.insertarSocio(nuevoSocio);
                cout << "Socio registrado exitosamente.\n";
                break;
            }
            case 2: {
                int numero;
                cout << "Ingrese numero de socio a dar de baja: ";
                cin >> numero;
                if (lista.eliminarSocio(numero)) {
                    cout << "Socio eliminado exitosamente.\n";
                } else {
                    cout << "Socio no encontrado.\n";
                }
                break;
            }
            case 3: {
                cout << "Reporte de socios:\n";
                lista.generarReporte();
                break;
            }
            case 4: {
                string nombre, domicilio;
                cout << "Ingrese nombre del socio: ";
                cin.ignore();
                getline(cin, nombre);
                cout << "Ingrese domicilio del socio: ";
                getline(cin, domicilio);
                Nodo *socio = lista.buscarSocio(nombre, domicilio);
                if (socio) {
                    socio->socio.mostrar();
                } else {
                    cout << "Socio no encontrado.\n";
                }
                break;
            }
            case 5: {
                cout << "Total de socios registrados: " << lista.obtenerTotalSocios() << endl;
                break;
            }
            case 6:
                cout << "Saliendo...\n";
                break;
            default:
                cout << "Opcion no valida.\n";
        }
    } while (opcion != 6);
}

int main() {
    menu();
    return 0;
}
